cmake_minimum_required(VERSION "3.19.2")

project("Renderer")
set(CMAKE_CXX_STANDARD 17)

# This makes sure that the dynamic library goes into the build directory automatically.
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/$<CONFIGURATION>")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/$<CONFIGURATION>")

add_subdirectory("thirdParty/SDL3" EXCLUDE_FROM_ALL)
add_subdirectory("thirdParty/glm" EXCLUDE_FROM_ALL)



include_directories("thirdParty/imgui")
include_directories("thirdParty/stb")
include_directories("thirdParty/tinyobjloader")

file(GLOB IMGUI_SOURCES
    "${CMAKE_SOURCE_DIR}/thirdParty/imgui/*.cpp"
    "${CMAKE_SOURCE_DIR}/thirdParty/imgui/backends/imgui_impl_sdl3.cpp"
    "${CMAKE_SOURCE_DIR}/thirdParty/imgui/backends/imgui_impl_vulkan.cpp"
)

# Create executable
add_executable("Renderer" "src/triangle.cpp" ${IMGUI_SOURCES})

# Macro for resources
target_compile_definitions("Renderer" PUBLIC RESOURCES_PATH="${CMAKE_CURRENT_SOURCE_DIR}/resources/")

target_link_libraries("Renderer" PRIVATE "SDL3::SDL3" "glm::glm")


# Vulkan
find_package(Vulkan REQUIRED)
if(Vulkan_FOUND)
    message(STATUS "Found Vulkan: ${Vulkan_LIBRARY}")
    include_directories(${Vulkan_INCLUDE_DIR})
    target_link_libraries("Renderer" PRIVATE "Vulkan::Vulkan")
endif()
